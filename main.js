/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianNoteLog
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  logFilePath: "",
  dailyNoteFormat: "YYYY-MM-DD [LOG]",
  logLinks: false
};
var ObsidianNoteLog = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.leafFiles = [];
  }
  //this.app.command.g
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerGeneralEvents();
      this.initialiseLeafFile();
      this.logLeafChanges(false, this.processLeaves(false));
      this.registerOpenCloseEvents();
    });
  }
  onunload() {
    this.initialiseLeafFile();
    this.logLeafChanges(true, this.processLeaves(true));
    this.writeChangelog(this.ObsidianStopLog());
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // #endregion
  // #region 
  registerGeneralEvents() {
    let logfile = window.moment().format(this.settings.logFilePath);
    this.writeChangelog(this.ObsidianStartLog());
    this.registerEvent(this.app.vault.on("create", (file) => {
      this.writeChangelog(this.FileCreateLog(file.path));
    }));
    this.registerEvent(this.app.vault.on("rename", (file, oldName) => {
      this.writeChangelog(this.FileMoveLog(file.path, oldName));
    }));
    this.registerEvent(this.app.vault.on("modify", (file) => {
      if (file.path != logfile) {
        this.writeChangelog(this.FileModifyLog(file.path));
      }
    }));
    this.registerEvent(this.app.vault.on("delete", (file) => {
      this.writeChangelog(this.FileDeleteLog(file.path));
    }));
    this.registerEvent(this.app.workspace.on("quit", () => {
      this.initialiseLeafFile();
      this.logLeafChanges(true, this.processLeaves(true));
      this.writeChangelog(this.ObsidianStopLog());
    }));
  }
  registerOpenCloseEvents() {
    let hover = /* @__PURE__ */ new Map();
    const debouncedActiveLeafChange = (0, import_obsidian.debounce)(() => {
      this.initialiseLeafFile();
      this.logLeafChanges(false, this.processLeaves(false));
    }, 100);
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
      this.initialiseLeafFile();
      if (leaf !== void 0) {
        let newActiveIndex = this.leafFiles.findIndex((leafdata) => leafdata.curLeaf === leaf);
        let lastActive = this.leafFiles.find((leafdata) => leafdata.active === true);
        let lastActiveIndex = this.leafFiles.findIndex((leafdata) => leafdata.active === true);
        this.leafFiles[newActiveIndex].active = true;
        if (lastActive !== void 0) {
          this.leafFiles[lastActiveIndex].active = false;
          this.leafFiles[newActiveIndex].lastLeaf = lastActive.curLeaf;
        }
      } else {
      }
    }));
    this.registerEvent(this.app.workspace.on("layout-change", () => {
      debouncedActiveLeafChange();
    }));
    this.registerEvent(this.app.workspace.on("resize", () => {
      debouncedActiveLeafChange();
    }));
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      debouncedActiveLeafChange();
    }));
  }
  // #endregion
  // #region LeafFile Functions
  /*
  get all the leaves that currently exist and are viewable and add them to array, if they aren't in there yet, then add them newly, with initialised values
  */
  initialiseLeafFile() {
    let allLeaves = this.getVisibleLeaves(this.getLeafsInWorkspace());
    for (let leaf = 0; leaf < allLeaves.length; leaf++) {
      let thisLeaf = allLeaves[leaf];
      let thisLeafData = this.leafFiles.find((leafdata) => leafdata.curLeaf === thisLeaf);
      if (thisLeafData === void 0) {
        let newLeaf = {
          curLeaf: thisLeaf,
          lastLeaf: void 0,
          curFile: void 0,
          curType: "empty",
          prevFile: void 0,
          prevType: "empty",
          active: false,
          logged: [true, true],
          inview: true
          //:false
        };
        this.leafFiles.push(newLeaf);
      }
    }
  }
  /*
  if a leaf has changed from how it was before, update the details stored about that leaf
  */
  processLeaves(end) {
    var _a, _b, _c, _d, _e;
    let allLeaves = this.getLeafsInWorkspace();
    let visibleLeaves = this.getVisibleLeaves(allLeaves);
    let deleteLeafFile = [];
    let occcurences = this.getOpenFileInstances(visibleLeaves);
    for (let leaf = 0; leaf < this.leafFiles.length; leaf++) {
      let leafdata = this.leafFiles[leaf];
      let viewable = visibleLeaves.find((visibleLeaf) => visibleLeaf === leafdata.curLeaf);
      if (leafdata.curFile !== ((_a = leafdata.curLeaf.getViewState()) == null ? void 0 : _a.state.file) || leafdata.curType != leafdata.curLeaf.getViewState().type || leafdata.inview === true && viewable === void 0 || leafdata.inview === false && viewable !== void 0 || end === true) {
        leafdata.logged = [true, true];
        let newFileOccurence = this.leafFiles.find((leafData) => {
          var _a2, _b2;
          return leafData.curFile === ((_a2 = leafdata.curLeaf.getViewState()) == null ? void 0 : _a2.state.file) && leafData.inview === true && leafData.curType === "markdown" && ((_b2 = leafdata.curLeaf.getViewState()) == null ? void 0 : _b2.type) === "markdown";
        });
        if (newFileOccurence === void 0 && ((_b = leafdata.curLeaf.getViewState()) == null ? void 0 : _b.type) == "markdown" && (leafdata.curFile !== ((_c = leafdata.curLeaf.getViewState().state) == null ? void 0 : _c.file) || leafdata.inview === false)) {
          leafdata.logged[0] = false;
          leafdata.inview = true;
        }
        if ((leafdata.curFile !== void 0 && occcurences.get(leafdata.curFile) === void 0 || viewable === void 0) && leafdata.curType == "markdown") {
          leafdata.inview = false;
          let oldFileOccurence = this.leafFiles.find((leafData) => leafData.curFile === leafdata.curFile && leafData.inview === true);
          if (oldFileOccurence === void 0) {
            leafdata.logged[1] = false;
            if (viewable === void 0) {
              deleteLeafFile.push(leaf);
            }
          }
        }
        if (end === true) {
          if (leafdata.curFile !== void 0 && occcurences.get(leafdata.curFile) !== void 0) {
            leafdata.prevFile = leafdata.curFile;
            leafdata.prevType = leafdata.curType;
            leafdata.curFile = (_d = leafdata.curLeaf.getViewState().state) == null ? void 0 : _d.file;
            leafdata.curType = leafdata.curLeaf.getViewState().type;
            occcurences.set(leafdata.curFile, void 0);
          }
        } else if (end === false) {
          leafdata.prevFile = leafdata.curFile;
          leafdata.prevType = leafdata.curType;
          leafdata.curFile = (_e = leafdata.curLeaf.getViewState().state) == null ? void 0 : _e.file;
          leafdata.curType = leafdata.curLeaf.getViewState().type;
        }
      }
    }
    return deleteLeafFile;
  }
  /*
  Check all the changes that have been recorded for needing updates, and then output the result of that
  */
  logLeafChanges(end, deletedLeaf) {
    for (let leaf = 0; leaf < this.leafFiles.length; leaf++) {
      let leafdata = this.leafFiles[leaf];
      if (end === true && leafdata.inview === true && leafdata.prevType === "markdown") {
        leafdata.logged[1] = false;
        leafdata.inview = false;
      }
      if (leafdata.logged[1] === false && leafdata.prevFile !== void 0) {
        this.writeChangelog(this.FileCloseLog(leafdata.prevFile));
        leafdata.logged[1] = true;
      }
      if (leafdata.logged[0] === false && leafdata.curFile !== void 0) {
        this.writeChangelog(this.FileOpenLog(leafdata.curFile, this.leafFiles.find((data) => data.curLeaf === leafdata.lastLeaf)));
        leafdata.logged[0] = true;
      }
    }
    for (let data = deletedLeaf.length - 1; data > -1; data--) {
      this.leafFiles.splice(deletedLeaf[data], 1);
    }
  }
  //#endregion 
  // #region File Writing
  //Log building Logic
  async writeInFile(filePath, content) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      await this.app.vault.append(file, content);
    } else {
      new import_obsidian.Notice("Couldn't write Note log: check the file path, file might not exist");
    }
  }
  buildChangelog(logText) {
    let logFormat = "[[date::] YYYY-MM-DD[]] [at] [[time::] HH:mm:ss[]] [[timezone::]Z[]]";
    let changelogContent = ``;
    const humanTime = window.moment().format(logFormat);
    changelogContent += `- ${humanTime} \xB7 ${logText}
`;
    return changelogContent;
  }
  async writeChangelog(logText) {
    const log = this.buildChangelog(logText);
    let file = window.moment().format(this.settings.logFilePath);
    await this.writeInFile(file, log);
  }
  // #endregion
  //Open and Closing 
  //still have not factured in hover open notes
  getLeafsInWorkspace() {
    let leafsInWorkspace = [];
    leafsInWorkspace = this.app.workspace.getLeavesOfType("markdown");
    return leafsInWorkspace;
  }
  getVisibleLeaves(leafs) {
    var _a, _b, _c, _d;
    let visibleLeafs = [];
    for (let leaf = 0; leaf < leafs.length; leaf++) {
      let leafStyle = (_a = leafs[leaf].view.containerEl.parentElement) == null ? void 0 : _a.style.display;
      let mainSplit = (_d = (_c = (_b = leafs[leaf].view.containerEl.parentElement) == null ? void 0 : _b.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.parentElement;
      if ((mainSplit == null ? void 0 : mainSplit.className.includes("mod-left-split")) && mainSplit.style.display == "none") {
      } else if ((mainSplit == null ? void 0 : mainSplit.className.includes("mod-right-split")) && mainSplit.style.display == "none") {
      } else if (leafStyle == "none") {
      } else if (leafs[leaf] == void 0) {
      } else {
        visibleLeafs.push(leafs[leaf]);
      }
    }
    return visibleLeafs;
  }
  getOpenFileInstances(leaves) {
    var _a;
    let fileInstances = /* @__PURE__ */ new Map([]);
    for (let leaf = 0; leaf < leaves.length; leaf++) {
      const file = (_a = leaves[leaf].getViewState().state) == null ? void 0 : _a.file;
      const type = leaves[leaf].getViewState().type;
      if (fileInstances.has(file) && file != void 0 && type == "markdown") {
        let num = fileInstances.get(file) + 1;
        fileInstances.delete(file);
        fileInstances.set(file, num);
      } else if (file != void 0) {
        fileInstances.set(file, 1);
      } else {
      }
    }
    return fileInstances;
  }
  // #region Log Functions
  //Opening and closing files done, apart from hover open file, and logic for having screen available but obsidian tabbed out and multi monitor mode
  //I think obsidian in foreground is something that is more of a system specific action so might have to ignore that for now but include condition for no leafs active at all (undefined)
  //[action:: start, end, open, close, create, modify, delete, move]
  //[method:: command, link]
  //if through link or if command based on a certain page
  //[origin:: [[note link]], file explorer, back links, graph]
  // Logic for opening and closing files
  // opened file has extra conditonal state (markdown & other), (if markdown, show file from)
  //- [[File]] Opened through [view:: viewType], [link:: ] at [date:: YYYY-MM-DD] [time:: HH:mm:ss]
  FileOpenLog(file, prevLeafFiles) {
    var _a;
    let filename = (_a = this.app.vault.getAbstractFileByPath(file)) == null ? void 0 : _a.name;
    let log;
    if (this.settings.logLinks === true) {
      log = "[target:: [[" + file + "|" + filename + "]]]  [action:: Opened]";
    } else {
      log = '[target:: "' + file + '"]  [action:: Opened]';
    }
    return log;
  }
  //- [[File]] Closed at [date:: YYYY-MM-DD] [time:: HH:mm:ss]
  FileCloseLog(file) {
    var _a;
    let filename = (_a = this.app.vault.getAbstractFileByPath(file)) == null ? void 0 : _a.name;
    let log;
    if (this.settings.logLinks === true) {
      log = "[target:: [[" + file + "|" + filename + "]]]  [action:: Closed]";
    } else {
      log = '[target:: "' + file + '"]  [action:: Closed]';
    }
    return log;
  }
  //Logic for modifying files
  //- [[File]] Modified at [date:: YYYY-MM-DD] [time:: HH:mm:ss]
  FileModifyLog(file) {
    var _a;
    let filename = (_a = this.app.vault.getAbstractFileByPath(file)) == null ? void 0 : _a.name;
    let log;
    if (this.settings.logLinks === true) {
      log = "[target:: [[" + file + "|" + filename + "]]]  [action:: Modified]";
    } else {
      log = '[target:: "' + file + '"]]]  [action:: Modified]';
    }
    return log;
  }
  // Logic for creating filees
  //- [[File]] Created at [date:: YYYY-MM-DD] [time:: HH:mm:ss]
  FileCreateLog(file) {
    let createdFile = this.app.vault.getAbstractFileByPath(file);
    let fileName = createdFile == null ? void 0 : createdFile.path;
    let type;
    let log;
    if (this.settings.logLinks === true) {
      if (createdFile instanceof import_obsidian.TFile) {
        if (createdFile.extension === "md") {
          type = "Note";
        } else {
          type = "Attachment";
        }
        log = "[target:: [[" + file + "|" + fileName + "]]]  [type:: " + type + "]  [action:: Created]";
      } else if (createdFile instanceof import_obsidian.TFolder) {
        type = "Folder";
        log = '[target:: "' + file + '"]]]  [type:: ' + type + "]  [action:: Created]";
      } else {
        type = "Other";
        log = "[target:: [[" + file + "|" + fileName + "]]]  [type:: " + type + "]  [action:: Created]";
      }
    } else {
      if (createdFile instanceof import_obsidian.TFile) {
        if (createdFile.extension === "md") {
          type = "Note";
        } else {
          type = "Attachment";
        }
      } else if (createdFile instanceof import_obsidian.TFolder) {
        type = "Folder";
      } else {
        type = "Other";
      }
      log = '[target:: "' + file + '"]]]  [type:: ' + type + "]  [action:: Created]";
    }
    return log;
  }
  // Logic for renaming/moving files
  //- [[OldFilePath]] renamed [[NewFilepath]] at [date:: YYYY-MM-DD] [time:: HH:mm:ss]
  FileMoveLog(file, oldFile) {
    var _a;
    let filename = (_a = this.app.vault.getAbstractFileByPath(file)) == null ? void 0 : _a.name;
    let oldFolderPath = oldFile.replace(".*/", "");
    let newFolderPath = file.replace(filename, "");
    let log;
    if (this.settings.logLinks === true) {
      if (oldFolderPath === newFolderPath || this.app.vault.getAbstractFileByPath(file) instanceof import_obsidian.TFolder) {
        log = "[target-old:: [[" + oldFile + "]]]  [action:: Renamed] to [target:: [[" + file + "|" + filename + "]]]";
      } else {
        log = "[target-old:: [[" + oldFile + "]]]  [action:: Moved] to [target:: [[" + file + "|" + filename + "]]]";
      }
    } else {
      if (oldFolderPath === newFolderPath) {
        log = '[target-old:: "' + oldFile + '"]  [action:: Renamed] to [target:: "' + file + '"]';
      } else {
        log = '[target-old:: "' + oldFile + '"]  [action:: Moved] to [target:: "' + file + '"]';
      }
    }
    return log;
  }
  /* Logic for deleting files
  - [[File]] Deleted at [date:: YYYY-MM-DD] [time:: HH:mm:ss]
  Perhaps instead of doing a wikilink to the note in this case, do a 
  	I could treat the deleting of a file as a move, and then just create a trash bin folder like I was thinking of doing anyway, which could be a seperate vault, 
  	so I move the note all the way to a different one, with a new link to that location so I can still refer to it, or keep a folder in the same vault for it 
  	(later on move it, assign a trash location in settings, or use standard .trash folder option => find out how to activate in settings => files and links tab in settings!)*/
  FileDeleteLog(file) {
    let log;
    if (this.settings.logLinks === true) {
      log = "[target:: [[" + file + "]]]  [action:: Deleted]";
    } else {
      log = '[target:: "' + file + '"]  [action:: Deleted]';
    }
    return log;
  }
  // Logic for the obsidian app opening and closing
  //Find out how to do this on start and stop
  //add maybe session information for the other logs, so I can tell if they belong to a certain session or not, but then maybe I need more states than start and stopped, e.g. paused, resumed, as well
  // close all files on pause, open all files on resume
  ObsidianStartLog() {
    let log = "[target:: Obsidian]  [action:: Started]";
    return log;
  }
  ObsidianStopLog() {
    let log = "[target:: Obsidian]  [action:: Stopped]";
    return log;
  }
  // #endregion
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Log File Format").setDesc("The format for the log file").addText((text) => text.setPlaceholder("Example: Folder/log.md").setValue(this.plugin.settings.logFilePath).onChange(async (value) => {
      this.plugin.settings.logFilePath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Links or Strings").setDesc("Whether to have links to files enabled or just the paths to files").addToggle((toggle) => toggle.setValue(this.plugin.settings.logLinks).onChange(async (value) => {
      this.plugin.settings.logLinks = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
